<?php
/**
 * AI Content Engine for CitySyncAI
 * Supports multiple providers with caching and preview integration.
 */

function citysyncai_generate_ai_content($provider, $content_type) {
    $cache_key = 'citysyncai_' . md5($provider . '_' . $content_type);
    $cached = get_transient($cache_key);

    echo "<div class='citysyncai-ai-content'>";
    echo "<h3>AI Content Generated by " . ucfirst($provider) . "</h3>";
    echo "<p><em>Content type:</em> " . ucfirst($content_type) . "</p>";

    if ($cached) {
        echo "<div class='citysyncai-ai-preview'>{$cached}</div>";
    } else {
        $output = citysyncai_dispatch_ai_provider($provider, $content_type);
        set_transient($cache_key, $output, 12 * HOUR_IN_SECONDS);
        echo "<div class='citysyncai-ai-preview'>{$output}</div>";
    }

    echo "</div>";
}

function citysyncai_dispatch_ai_provider($provider, $type) {
    switch ($provider) {
        case 'openai':
            return citysyncai_call_openai($type);
        case 'gemini':
            return citysyncai_call_gemini($type);
        case 'claude':
            return citysyncai_call_claude($type);
        case 'deepseek':
            return citysyncai_call_deepseek($type);
        case 'genspark':
            return citysyncai_call_genspark($type);
        case 'grok':
            return citysyncai_call_grok($type);
        default:
            return "<p>Unknown provider: $provider</p>";
    }
}

// ðŸ”¹ OpenAI
function citysyncai_call_openai($type) {
    $api_key = CITYSYNCAI_OPENAI_KEY;
    $prompt = "Generate SEO-optimized content for a {$type} page targeting local users.";
    $body = [
        'model' => 'gpt-4',
        'messages' => [
            ['role' => 'system', 'content' => 'You are a helpful SEO assistant.'],
            ['role' => 'user', 'content' => $prompt],
        ],
        'temperature' => 0.7,
        'max_tokens' => 500,
    ];
    return citysyncai_post_to_api('https://api.openai.com/v1/chat/completions', $body, $api_key);
}

// ðŸ”¹ Gemini
function citysyncai_call_gemini($type) {
    $api_key = CITYSYNCAI_GEMINI_KEY;
    $prompt = "Create engaging, SEO-rich content for a {$type} page.";
    $body = [
        'contents' => [['parts' => [['text' => $prompt]]]],
    ];
    return citysyncai_post_to_api("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={$api_key}", $body, null, true);
}

// ðŸ”¹ Claude
function citysyncai_call_claude($type) {
    $api_key = CITYSYNCAI_CLAUDE_KEY;
    $prompt = "Write SEO-optimized content for a {$type} page.";
    $body = [
        'model' => 'claude-2.1',
        'max_tokens' => 500,
        'temperature' => 0.7,
        'messages' => [
            ['role' => 'user', 'content' => $prompt],
        ],
    ];
    return citysyncai_post_to_api('https://api.anthropic.com/v1/messages', $body, $api_key, false, ['x-api-key' => $api_key]);
}

// ðŸ”¹ DeepSeek
function citysyncai_call_deepseek($type) {
    $api_key = CITYSYNCAI_DEEPSEEK_KEY;
    $prompt = "Generate SEO content for a {$type} page.";
    $body = [
        'model' => 'deepseek-chat',
        'messages' => [
            ['role' => 'user', 'content' => $prompt],
        ],
    ];
    return citysyncai_post_to_api('https://api.deepseek.com/v1/chat/completions', $body, $api_key);
}

// ðŸ”¹ Genspark
function citysyncai_call_genspark($type) {
    $api_key = CITYSYNCAI_GENSPARK_KEY;
    $prompt = "SEO content for {$type} page.";
    $body = [
        'model' => 'genspark-pro',
        'messages' => [
            ['role' => 'user', 'content' => $prompt],
        ],
    ];
    return citysyncai_post_to_api('https://api.genspark.ai/v1/chat/completions', $body, $api_key);
}

// ðŸ”¹ Grok
function citysyncai_call_grok($type) {
    $api_key = CITYSYNCAI_GROK_KEY;
    $prompt = "SEO content for {$type} page.";
    $body = [
        'messages' => [
            ['role' => 'user', 'content' => $prompt],
        ],
    ];
    return citysyncai_post_to_api('https://api.x.ai/v1/chat/completions', $body, $api_key);
}

// ðŸ”§ Shared API Caller
function citysyncai_post_to_api($url, $body, $api_key = null, $is_gemini = false, $custom_headers = []) {
    $headers = $custom_headers ?: [
        'Authorization' => $api_key ? 'Bearer ' . $api_key : '',
        'Content-Type'  => 'application/json',
    ];

    $response = wp_remote_post($url, [
        'headers' => $headers,
        'body'    => wp_json_encode($body),
        'timeout' => 20,
    ]);

    if (is_wp_error($response)) {
        return "<p>Error: " . esc_html($response->get_error_message()) . "</p>";
    }

    $data = json_decode(wp_remote_retrieve_body($response), true);

    if ($is_gemini) {
        return $data['candidates'][0]['content']['parts'][0]['text'] ?? "<p>No Gemini response.</p>";
    }

    return $data['choices'][0]['message']['content'] ?? "<p>No response from provider.</p>";
}